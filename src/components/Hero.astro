---
import Countdown from './Countdown.astro';
---

<section class="relative min-h-screen flex items-center justify-center overflow-hidden py-20">
  <div class="absolute inset-0 z-0">
    <div class="absolute inset-0 bg-gradient-to-b from-purple-900/90 to-black/50 mix-blend-multiply"></div>
  </div>

  <div class="relative z-10 text-center">
    <div class="flex justify-center items-center">
        <img 
          src="Logo/1.png" 
          class="max-w-40 md:w-1/2 mx-auto hover-3d" 
          alt="HackReality Logo"
          id="hoverLogo"
          loading="lazy"
        />
    </div>

    <h1 class="text-4xl md:text-6xl font-bold mb-6  animate-fade-in-up">
      <span class="bg-clip-text text-transparent bg-gradient-to-r from-green-400 to-purple-600">
        HackReality 2024
      </span>
    </h1>

    <p class="text-xl md:text-3xl text-purple-200 mb-8 animate-fade-in-up animation-delay-200 font-bold">
      ¡Conecta, Colabora, Crea: Hackea tu potencial!
    </p>

    <div class="flex justify-center space-x-4 animate-fade-in-up animation-delay-400">
      <a 
        href="https://hackreality-spatial-computing.devpost.com/" 
        target="_blank" 
        class="px-8 py-3 rounded-full bg-green-600 text-black font-bold hover:bg-green-500 transition-colors"
      >
        Regístrate Ya
      </a>
 <!--      <a 
        href="#" 
        class="px-8 py-3 rounded-full bg-purple-600 text-white font-bold hover:bg-purple-500 transition-colors"
      >
        Más Información
      </a> -->
    </div>

    <div class="mt-10 animate-fade-in-up animation-delay-600">
      <Countdown targetDate="2024-12-13T17:00:00" />
    </div>
  </div>
</section>

<style>
  .hover-3d {
    transform: scale(4);
    transform-style: preserve-3d;
    transition: transform 0.1s ease-out;
    backface-visibility: hidden;
    transform: perspective(1000px);
    cursor: pointer;
    will-change: transform;
    -webkit-font-smoothing: subpixel-antialiased;
  }

  @keyframes fade-in-up {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .animate-fade-in-up {
    animation: fade-in-up 0.6s ease-out forwards;
  }

  .animation-delay-200 {
    animation-delay: 0.2s;
  }

  .animation-delay-400 {
    animation-delay: 0.4s;
  }

  .animation-delay-600 {
    animation-delay: 0.6s;
  }
</style>

<script>
  const initHoverEffect = () => {
    const imageElement = document.getElementById('hoverLogo') as HTMLImageElement;
    
    if (!imageElement) return;

    let isHovering = false;

    const handleMouseMove = (event: MouseEvent) => {
      if (!isHovering) return;

      const rect = imageElement.getBoundingClientRect();
      const x = event.clientX - rect.left;
      const y = event.clientY - rect.top;

      // Verificar si el mouse está dentro de la imagen
      if (x < 0 || x > rect.width || y < 0 || y > rect.height) {
        handleMouseLeave();
        return;
      }

      const centerX = rect.width / 2;
      const centerY = rect.height / 2;

      const rotateX = ((y - centerY) / centerY) * 30;
      const rotateY = ((x - centerX) / centerX) * 30;

      imageElement.style.transform = `
        perspective(1000px)
        rotateX(${-rotateX}deg) 
        rotateY(${rotateY}deg)
        scale3d(1.1, 1.1, 1.1)
      `;
    };

    const handleMouseLeave = () => {
      isHovering = false;
      imageElement.style.transform = 'perspective(1000px) rotateX(0) rotateY(0) scale3d(1, 1, 1)';
    };

    const handleMouseEnter = () => {
      isHovering = true;
      imageElement.style.transition = 'transform 0.1s ease-out';
    };

    // Eventos en la imagen
    imageElement.addEventListener('mouseenter', handleMouseEnter);
    imageElement.addEventListener('mouseleave', handleMouseLeave);
    // Evento de movimiento en el documento para seguir el mouse
    document.addEventListener('mousemove', handleMouseMove);

    // Limpieza de eventos
    return () => {
      imageElement.removeEventListener('mouseenter', handleMouseEnter);
      imageElement.removeEventListener('mouseleave', handleMouseLeave);
      document.removeEventListener('mousemove', handleMouseMove);
    };
  };

  // Inicializar efecto cuando el DOM esté listo
  document.addEventListener('DOMContentLoaded', initHoverEffect);
</script>