---
import Countdown from './Countdown.astro';
---

<section class="relative min-h-screen flex items-center justify-center overflow-hidden py-20">
  <div class="absolute inset-0 z-0">
    <div class="absolute inset-0 bg-gradient-to-r from-purple-900/50 to-green-900/50 mix-blend-multiply"></div>
  </div>

  <div class="relative z-10 text-center mt-8">
    <div class="perspective-wrapper mb-10">
      <div class="relative inline-flex w-fit h-fit">
        <div class="overflow-hidden w-fit h-fit">
          <div class="transform-container">
            <img 
              src="Logo/Recurso-2.webp" 
              class="hoverImage max-w-40 md:w-1/2 mx-auto object-contain relative z-10" 
              alt="HackReality Logo"
              id="hoverLogo"
            />
            <div class="shine absolute inset-0 pointer-events-none z-20"></div>
          </div>
        </div>
      </div>
    </div>

    <h1 class="text-4xl md:text-6xl font-bold mb-6 mt-10 animate-fade-in-up">
      <span class="bg-clip-text text-transparent bg-gradient-to-r from-green-400 to-purple-500">
        HackReality 2024
      </span>
    </h1>

    <p class="text-xl md:text-3xl text-purple-200 mb-8 animate-fade-in-up animation-delay-200">
      Explora el futuro del Spatial Computing
    </p>

    <div class="flex justify-center space-x-4 animate-fade-in-up animation-delay-400">
      <a 
        href="https://hackreality-spatial-computing.devpost.com/" 
        target="_blank" 
        class="px-8 py-3 rounded-full bg-green-500 text-black font-bold hover:bg-green-400 transition-colors"
      >
        Participar
      </a>
      <a 
        href="#" 
        class="px-8 py-3 rounded-full bg-purple-600 text-white font-bold hover:bg-purple-500 transition-colors"
      >
        Más Información
      </a>
    </div>

    <div class="mt-16 animate-fade-in-up animation-delay-600">
      <Countdown targetDate="2024-12-13T17:00:00" />
    </div>
  </div>
</section>

<style>
  .perspective-wrapper {
    perspective: 1000px;
    width: fit-content;
    height: fit-content;
    margin: 0 auto;
  }

  .transform-container {
    transform-style: preserve-3d;
    transition: transform 0.1s ease-out;
    position: relative;
  }

  .hoverImage {
    cursor: pointer;
    display: block;
    width: 100%;
    height: 100%;
    -webkit-backface-visibility: hidden;
    backface-visibility: hidden;
  }

  .shine {
    opacity: 0;
    background: radial-gradient(
      circle at 50% 50%,
      rgba(255, 255, 255, 0.8) 0%,
      rgba(255, 255, 255, 0.3) 20%,
      transparent 50%
    );
    transition: opacity 0.3s;
    pointer-events: none;
    mix-blend-mode: overlay;
  }

  .shine-active {
    opacity: 1;
  }

  @keyframes fade-in-up {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .animate-fade-in-up {
    animation: fade-in-up 0.6s ease-out forwards;
  }

  .animation-delay-200 {
    animation-delay: 0.2s;
  }

  .animation-delay-400 {
    animation-delay: 0.4s;
  }

  .animation-delay-600 {
    animation-delay: 0.6s;
  }
</style>

<script>
  const initHoverEffect = () => {
    const imageElement = document.getElementById('hoverLogo') as HTMLImageElement;
    const wrapper = imageElement?.closest('.transform-container') as HTMLDivElement;
    const shineElement = wrapper?.querySelector('.shine') as HTMLDivElement;
    
    if (!imageElement || !shineElement || !wrapper) return;

    // Set initial dimensions of wrapper based on image
    const setWrapperDimensions = () => {
      const { width, height } = imageElement.getBoundingClientRect();
      wrapper.style.width = `${width}px`;
      wrapper.style.height = `${height}px`;
      shineElement.style.width = `${width}px`;
      shineElement.style.height = `${height}px`;
    };

    // Set initial dimensions
    setWrapperDimensions();

    // Update dimensions on window resize
    window.addEventListener('resize', setWrapperDimensions);

    const handleMouseMove = (e: Event) => {
      const mouseEvent = e as MouseEvent;
      const rect = wrapper.getBoundingClientRect();
      const x = mouseEvent.clientX - rect.left;
      const y = mouseEvent.clientY - rect.top;
      
      const dx = (x - rect.width / 2) / (rect.width / 2);
      const dy = (y - rect.height / 2) / (rect.height / 2);
      
      wrapper.style.transform = `
        rotateY(${dx * 25}deg) 
        rotateX(${-dy * 25}deg)
        scale3d(1.05, 1.05, 1.05)
      `;

      const moveX = (x / rect.width) * 100;
      const moveY = (y / rect.height) * 100;
      
      shineElement.classList.add('shine-active');
      shineElement.style.background = `radial-gradient(
        circle at ${moveX}% ${moveY}%,
        rgba(255, 255, 255, 0.8) 0%,
        rgba(255, 255, 255, 0.3) 20%,
        transparent 50%
      )`;
    };

    const handleMouseLeave = () => {
      wrapper.style.transform = 'none';
      shineElement.classList.remove('shine-active');
    };

    wrapper.parentElement?.addEventListener('mousemove', handleMouseMove as EventListener);
    wrapper.parentElement?.addEventListener('mouseleave', handleMouseLeave);

    // Cleanup
    return () => {
      window.removeEventListener('resize', setWrapperDimensions);
      wrapper.parentElement?.removeEventListener('mousemove', handleMouseMove as EventListener);
      wrapper.parentElement?.removeEventListener('mouseleave', handleMouseLeave);
    };
  };

  document.addEventListener('DOMContentLoaded', initHoverEffect);
</script>